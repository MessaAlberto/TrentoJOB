openapi: 3.0.0
info:
  title: Authentication and Authorization API
  description:  This API provides secure authentication and authorization services for user accounts, including functionalities for login, registration, password management, and role-based access control. Additionally, the API supports event management, announcements, organization handling, and user profile management.
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: AUTENTICAZIONE
    description: gestione acesso

  - name: AMMINISTRATORE
    description: gestione amministratori

  - name: UTENTE
    description: gestione utente

  - name: ORGANIZZAZIONE
    description: gestione organizzazione

  - name: EVENTO
    description: getione eventi

  - name: ANNUNCIO
    description: gestione annunci

  - name: CHAT
    description: gestione chat

  - name: COMMENTO
    description: gestione commenti

  - name: PASSWORD
    description: gestione password

paths:
  /auth:
    post:
      tags:
        - AUTENTICAZIONE
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid credentials or server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Email not confirmed or account not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - AUTENTICAZIONE
      summary: Refresh access token
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefreshResponse'
        '401':
          description: Missing or invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - AUTENTICAZIONE
      summary: User logout
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'

  /auth/{token}:
    get:
      tags:
        - AUTENTICAZIONE
      summary: Confirm email
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmMailResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  ################################################################################################################
  /admins:
    post:
      tags:
        - AMMINISTRATORE
      summary: Create a new admin user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCreationRequest'
      responses:
        '201':
          description: Admin user created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminIdResponse'
        '400':
          description: Email already exists or invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

    put:
      tags:
        - AMMINISTRATORE
      summary: Modify an existing admin user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminModificationRequest'
      responses:
        '200':
          description: Admin user modified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminIdResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Admin user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

    get:
      tags:
        - AMMINISTRATORE
      summary: Get a list of admin users
      responses:
        '200':
          description: List of admin users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminUser'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /admins/{id}:
    get:
      tags:
        - AMMINISTRATORE
      summary: Get admin user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Admin user found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
        '404':
          description: Admin user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

    delete:
      tags:
        - AMMINISTRATORE
      summary: Delete admin user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Admin user deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminIdResponse'
        '404':
          description: Admin user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
  ##################################################################################################################
  /announcement:
    post:
      tags:
        - ANNUNCIO
      summary: Create a new announcement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementCreationRequest'
      responses:
        '201':
          description: Announcement created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementIdResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

    get:
      tags:
        - ANNUNCIO
      summary: Get a list of announcements
      responses:
        '200':
          description: List of announcements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Announcement'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /announcement/{id}:
    get:
      tags:
        - ANNUNCIO
      summary: Get announcement by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Announcement found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
        '404':
          description: Announcement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - ANNUNCIO
      summary: Update announcement by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementModificationRequest'
      responses:
        '200':
          description: Announcement updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementIdResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Announcement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

    delete:
      tags:
        - ANNUNCIO
      summary: Delete announcement by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Announcement deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementIdResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Announcement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
  #######################################################################################################
  /users:
    post:
      tags:
        - UTENTE
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - UTENTE
      summary: Get a list of users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      tags:
        - UTENTE
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - UTENTE
      summary: Update user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - UTENTE
      summary: Delete user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  ############################################################################################################
  /organisations:
    post:
      tags:
        - ORGANIZZAZIONE
      summary: Register a new organisation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationRegistrationRequest'
      responses:
        '201':
          description: Organisation registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationIdResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - ORGANIZZAZIONE
      summary: Get a list of organisations
      responses:
        '200':
          description: List of organisations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organisations/{id}:
    get:
      tags:
        - ORGANIZZAZIONE
      summary: Get organisation by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Organisation found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '404':
          description: Organisation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - ORGANIZZAZIONE
      summary: Update organisation by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationUpdateRequest'
      responses:
        '200':
          description: Organisation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationIdResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Organisation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

    delete:
      tags:
        - ORGANIZZAZIONE
      summary: Delete organisation by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Organisation deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationIdResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Organisation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  ##########################################################################################################################
  /events:
    post:
      tags:
        - EVENTO
      summary: Create a new event
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreationRequest'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventIdResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - EVENTO
      summary: Get a list of events
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/{id}:
    get:
      tags:
        - EVENTO
      summary: Get event by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - EVENTO
      summary: Update event by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdateRequest'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventIdResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - EVENTO
      summary: Delete event by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Event deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventIdResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  #########################################################################################################
  /chat/{id}:
    post:
      tags:
        - CHAT
      summary: Create a new chat.
      description: Creates a new chat between the logged-in user and another user.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat created or already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  chat_id:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      tags:
        - CHAT
      summary: Send a message in the chat.
      description: Sends a message in the specified chat.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
      responses:
        '200':
          description: Message sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - CHAT
      summary: Get chat details.
      description: Retrieves the details of the specified chat.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat details retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  memberA:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      role:
                        type: string
                  memberB:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      role:
                        type: string
                  messages:
                    type: array
                    items:
                      type: object
                      properties:
                        sender:
                          type: object
                          properties:
                            id:
                              type: string
                            username:
                              type: string
                        text:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - CHAT
      summary: Delete a chat.
      description: Deletes the specified chat and removes it from the users' chat lists.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat deleted.
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  #########################################################################################################
  /comment/{id}:
    post:
      tags:
        - COMMENTO
      summary: Add a comment to an event.
      description: Adds a new comment to the specified event.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: Comment text.
      responses:
        '201':
          description: Comment added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - COMMENTO
      summary: Get comments for an event.
      description: Retrieves all comments for the specified event.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comments retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: object
                      properties:
                        id:
                          type: string
                        username:
                          type: string
                        role:
                          type: string
                    text:
                      type: string
                    createdAt:
                      type: string
                      format: date-time
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /comment:
    get:
      tags:
        - COMMENTO
      summary: Get comments for an event by query.
      description: Retrieves comments for the specified event using a query parameter.
      parameters:
        - name: eventId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event comments retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  owner:
                    type: string
                  comments:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          type: object
                          properties:
                            id:
                              type: string
                            username:
                              type: string
                            role:
                              type: string
                        text:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - COMMENTO
      summary: Delete a comment.
      description: Deletes a specified comment from an event.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
                  description: ID of the comment to delete.
                eventId:
                  type: string
                  description: ID of the event containing the comment.
      responses:
        '200':
          description: Comment deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  #########################################################################################################
  /password:
    post:
      tags:
        - PASSWORD
      summary: Request a password reset link.
      description: Sends a password reset link to the user's email address.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
      responses:
        '200':
          description: A reset link has been sent to your email address.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /password/{token}/{_id}:
    patch:
      tags:
        - PASSWORD
      summary: Reset the user's password.
      description: Resets the user's password using the provided token.
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
        - name: _id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Password has been successfully reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid token for this user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

#########################################################################################################
components:
  schemas:
    Message:
      type: object
      properties:
        sender:
          type: object
          properties:
            id:
              type: string
            username:
              type: string
        text:
          type: string
        createdAt:
          type: string
          format: date-time

    PasswordResetRequest:
      type: object
      properties:
        email:
          type: string
          format: email
    PasswordReset:
      type: object
      properties:
        password:
          type: string
          format: password

    EventCreationRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        date:
          type: string
          format: date-time
      required:
        - name
        - date

    EventUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        date:
          type: string
          format: date-time

    EventIdResponse:
      type: object
      properties:
        eventId:
          type: string

    Event:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        date:
          type: string
          format: date-time

    OrganisationRegistrationRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - name
        - email
        - password

    OrganisationUpdateRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      required:
        - name
        - email

    OrganisationIdResponse:
      type: object
      properties:
        organisationId:
          type: string

    Organisation:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string

    UserRegistrationRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - username
        - email
        - password

    UserUpdateRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
      required:
        - username
        - email

    UserIdResponse:
      type: object
      properties:
        userId:
          type: string

    User:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string

    AnnouncementCreationRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
      required:
        - title
        - content

    AnnouncementModificationRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string

    AnnouncementIdResponse:
      type: object
      properties:
        announcementId:
          type: string

    Announcement:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string

    AdminCreationRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - username
        - email
        - password

    AdminModificationRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
      required:
        - username
        - email

    AdminIdResponse:
      type: object
      properties:
        user:
          type: string
      required:
        - user

    ErrorResponse:
      type: object
      properties:
        message:
          type: string

    AdminUser:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string
        confirmed:
          type: boolean

    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string

    TokenRefreshResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string

    ConfirmMailResponse:
      type: object
      properties:
        message:
          type: string

    LogoutResponse:
      type: object
      properties:
        message:
          type: string

    Comment:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
            username:
              type: string
            role:
              type: string
        text:
          type: string
        createdAt:
          type: string
          format: date-time